%% Multi-Class Image Classification with Transfer Learning

% Define paths and parameters
trainDataPath = 'data/train';
testDataPath = 'data/test';
imageSize = [150, 150];

%% Load and Prepare Training Data
imdsTrain = imageDatastore(trainDataPath, ...
    'IncludeSubfolders', true, ...
    'LabelSource', 'foldernames');

% Augmentation settings
imageAugmenter = imageDataAugmenter( ...
    'RandRotation', [-20, 20], ...
    'RandXTranslation', [-10, 10], ...
    'RandYTranslation', [-10, 10], ...
    'RandXScale', [0.8, 1.2], ...
    'RandYScale', [0.8, 1.2], ...
    'RandBrightness', [0.8, 1.2], ...
    'RandContrast', [0.8, 1.2]);

augTrain = augmentedImageDatastore(imageSize, imdsTrain, ...
    'DataAugmentation', imageAugmenter);

%% Load and Prepare Test Data
imdsTest = imageDatastore(testDataPath, ...
    'IncludeSubfolders', true, ...
    'LabelSource', 'foldernames');

augTest = augmentedImageDatastore(imageSize, imdsTest);

%% Load Pretrained Network and Modify Final Layers
net = resnet50;
lgraph = layerGraph(net);

% Replace final layers for multi-class classification
numClasses = numel(categories(imdsTrain.Labels));
newLayers = [
    fullyConnectedLayer(numClasses, 'Name', 'new_fc', ...
        'WeightLearnRateFactor', 10, 'BiasLearnRateFactor', 10)
    softmaxLayer('Name', 'new_softmax')
    classificationLayer('Name', 'new_classoutput')];

lgraph = replaceLayer(lgraph, 'fc1000', newLayers(1));
lgraph = replaceLayer(lgraph, 'ClassificationLayer_fc1000', newLayers(3));

%% Set Training Options
options = trainingOptions('adam', ...
    'InitialLearnRate', 1e-4, ...
    'MaxEpochs', 25, ...
    'MiniBatchSize', 32, ...
    'ValidationData', augTest, ...
    'ValidationFrequency', 30, ...
    'ValidationPatience', 5, ...
    'Shuffle', 'every-epoch', ...
    'Verbose', true, ...
    'Plots', 'training-progress');

%% Train the Network
trainedNet = trainNetwork(augTrain, lgraph, options);

%% Evaluate the Model
YPred = classify(trainedNet, augTest);
YTest = imdsTest.Labels;

accuracy = sum(YPred == YTest) / numel(YTest);
disp(['Test Accuracy: ', num2str(accuracy)]);

%% Save the Model for Deployment
save('trainedMulticlassNet.mat', 'trainedNet');
